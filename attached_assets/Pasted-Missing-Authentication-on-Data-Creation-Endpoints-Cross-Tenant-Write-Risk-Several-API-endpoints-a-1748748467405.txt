Missing Authentication on Data Creation Endpoints (Cross-Tenant Write Risk): Several API endpoints allow creating trip-related data (todos, notes, activities) without enforcing user authentication or org ownership, posing a serious integrity and security risk. For example, the /api/todos and /api/notes endpoints do not verify req.user or organization context at all when inserting records
GitHub
GitHub
. This means an attacker (even unauthenticated or from another tenant) could craft requests to inject todos/notes into trips they do not own.
📍 Evidence: In server/routes.ts, the GET route for todos ensures the trip’s organizationId matches the requester’s org (line 877-883) before fetching, but the POST route immediately creates a todo after basic validation with no auth check
GitHub
GitHub
. Likewise, note creation lacks an auth check
GitHub
GitHub
.
❗ Why it Matters: This allows unauthorized or cross-tenant data manipulation. A malicious user could spam another organization’s trip with bogus entries or alter data integrity. It violates tenant isolation and could lead to compliance failures (SOC2) and unpredictable data in user accounts.
✅ Fix: Require authentication and enforce tenant ownership on all creation/modification routes. Implement a middleware or check (similar to GET routes) to reject requests if req.user is missing or the target trip’s organizationId doesn’t match the user’s org. For example:
ts
Copy
if (!req.user) return res.status(401).json({ error: "Authentication required" });
const trip = await storage.getTrip(todoData.tripId);
if (!trip || trip.organizationId !== req.user.organizationId) {
  return res.status(403).json({ error: "Access denied" });
}
Apply this to /api/activities, /api/todos, /api/notes (POST/PUT/DELETE) and any similar endpoints.
🧠 Replit Agent Prompt: “Identify all routes that create or modify trip data (activities, todos, notes, etc.) and add missing authentication and organization ownership checks. Ensure that req.user exists and that the target resource’s organizationId equals req.user.organizationId (or user has super_admin role) before proceeding.”
🧪 Testing: Using cURL, attempt to create a todo on a trip without authentication – e.g. curl -X POST -d '{"tripId": 123, "text": "Test"}' http://localhost:5000/api/todos. Before the fix this request succeeds (201 Created) even if you’re not logged in, or if trip 123 belongs to another org. After fixing, it should return 401/403. Also test that a logged-in user cannot create items on another organization’s trip (expects 403), but can create on their own trip (201 Created).
🟠 Major Issues