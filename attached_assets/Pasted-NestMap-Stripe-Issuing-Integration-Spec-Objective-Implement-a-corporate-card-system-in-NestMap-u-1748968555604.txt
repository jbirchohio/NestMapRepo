NestMap: Stripe Issuing Integration Spec
🧠 Objective
Implement a corporate card system in NestMap using Stripe Issuing, allowing organizations to issue virtual cards to team members, control spending, and sync transactions into the existing expenses and approval workflows.

🔐 Requirements
API Credentials
STRIPE_SECRET_KEY: Your Stripe API key (test mode for now)

ISSUING_WEBHOOK_SECRET: Stripe webhook signing secret for Issuing events

Add these to .env and ensure they are securely managed via process.env.

📦 Backend Structure
Location Suggestion:

pgsql
Copy
Edit
server/
├── routes/
│   └── corporateCard.ts
├── controllers/
│   └── corporateCardController.ts
├── services/
│   └── stripeService.ts
├── webhooks/
│   └── stripeIssuingWebhook.ts
🛠️ Features to Build
1. 🔧 Card Issuance Endpoint
Route: POST /api/corporate-card/issue

Access: Admin/Manager only (RBAC)

Input:

json
Copy
Edit
{
  "userId": "user_xxx",
  "spendLimit": 50000,         // in cents ($500)
  "interval": "weekly"         // or "monthly"
}
Process:

Use Stripe Issuing API to create a virtual card for the user

Store the result in a corporate_cards table:

sql
Copy
Edit
CREATE TABLE corporate_cards (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  organization_id UUID NOT NULL,
  stripe_card_id TEXT NOT NULL,
  last4 TEXT,
  exp_month INT,
  exp_year INT,
  brand TEXT,
  status TEXT,
  created_at TIMESTAMP DEFAULT now()
);
2. 🎯 Spend Control
On issuance, set limits via:

ts
Copy
Edit
spending_controls: {
  spending_limits: [{
    amount: 50000,
    interval: 'weekly',
  }],
  allowed_categories: ['travel', 'lodging', 'airlines'],
}
You can allow customization by organization config.

3. 🧪 Webhook Listener
Route: POST /api/webhooks/stripe-issuing

Events to Handle:

issuing_authorization.request

issuing_authorization.updated

issuing_transaction.created

Example Logic for issuing_transaction.created:

Parse the transaction

Lookup card by stripe_card_id

Convert into an expenses entry

Auto-attach to the current trip if one is active

Trigger approval flow if amount exceeds threshold

4. 📊 Dashboard UI (Optional for MVP)
Add card info to admin dashboard:

Show virtual card last4, limit, spend this period

List latest transactions with trip + user mapping

Approve/flag expenses directly

🔄 Stripe Test Instructions (for QA)
Use Stripe's Issuing simulator to trigger test transactions:

bash
Copy
Edit
curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \
  -u sk_test_...: \
  -d "card"="ic_123" \
  -d "amount"=1234 \
  -d "currency"="usd" \
  -d "merchant_data[name]"="JetBlue Airlines"
Webhook will simulate transaction, generate expenses entry.

Admin should see the expense appear automatically in trip record.

✅ Deliverables
 POST /api/corporate-card/issue — create virtual card with limit

 Webhook for issuing_transaction.created

 corporate_cards and expenses table connected

 Basic dashboard integration or log output

 Full test script in README

 API keys + config documented in .env.example

🚀 Bonus (if time permits)
 Ability to freeze/unfreeze card

 Add MCC restrictions by org policy

 Link card to specific trip (via metadata or manual tagging)