Perform a full audit and explanation of how NestMap handles white-labeled multi-organization logic, including:

1. Organization Separation
   - How is each organization (tenant) isolated in the database? (e.g., org_id foreign key, multi-tenant schema)
   - How is the org context loaded and used in API calls?
   - Show the middleware or session mechanism that determines which organization the request belongs to.

2. Role & Permission Enforcement
   - How are roles like admin, manager, user enforced across different organizations?
   - Which files control access logic?
   - Are there any leaks between organizations in role or data access?

3. Analytics Separation
   - How is analytics data scoped to the correct organization?
   - What filters or aggregations are applied in analytics queries?
   - Where are usage stats or metrics stored, and how are they tied to `org_id`?

4. Database Behavior
   - Show how queries ensure tenant isolation (e.g., `WHERE org_id = ?`)
   - Are there any queries or logic that donâ€™t respect org boundaries?

5. Test Real-Time Logic
   - Does WebSocket or real-time update logic respect organizational boundaries?
   - How does the real-time system ensure users only see updates from their org?

âœ… Simulate Tests:
- Use `curl` to test key endpoints with different organization session tokens or headers.
- Use `curl` to confirm that unauthorized access across orgs is blocked (e.g., user from Org A cannot access Org B trip).
- Provide sample `curl` commands to test trip creation, analytics fetch, and role-restricted actions.
- Validate role enforcement via backend logs or HTTP responses.

âœ… Deliverables:
- List all relevant files for organization scoping and permission enforcement
- Trace request flow from client to DB including organization context
- Confirm real-time behavior is isolated correctly
- Summarize any weaknesses or gaps in org isolation or permissions
ðŸ§ª Bonus: If you want to simulate multiple orgs in curl, tell it:
bash
Copy
Edit
curl -X GET http://localhost:5000/api/analytics \
  -H "Authorization: Bearer <token-for-org-a>" \
  -H "X-Org-ID: org_a_id"
And for a second test:

bash
Copy
Edit
curl -X GET http://localhost:5000/api/analytics \
  -H "Authorization: Bearer <token-for-org-b>" \
  -H "X-Org-ID: org_b_id"