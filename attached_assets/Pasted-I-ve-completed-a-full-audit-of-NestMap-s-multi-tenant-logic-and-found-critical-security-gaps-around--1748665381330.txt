Iâ€™ve completed a full audit of NestMapâ€™s multi-tenant logic and found critical security gaps around organization isolation. Please implement the following fixes carefully, ensuring no disruption to routing, existing user flows, or backward compatibility:

âœ… Goals:
Add strict organization boundary enforcement in the backend

Prevent all cross-organization data access

Maintain routing logic for /api endpoints and white-label domain routing

Ensure all queries and WebSocket logic are scoped to the current organization

ðŸ”§ Fixes Needed:
Database Schema Updates (non-destructive migration):

Add organization_id to:

trips

activities

todos

notes

Ensure foreign key relationships point to organizations.id

Organization Context Middleware:

Create middleware that loads req.organizationId from req.user.organization_id

Inject this into all authenticated routes

Update Queries:

Update all DB queries to filter by organization_id = req.organizationId

Example:

ts
Copy
Edit
where(eq(trips.organization_id, req.organizationId))
Especially fix:

/api/trips

/api/activities

/api/analytics/corporate

All admin/user endpoints

Fix Admin Role Scope:

Ensure admin roles are scoped to their organization

Replace global admin checks with hasOrganizationPermission(user, orgId, permission)

Update Domain Routing:

After resolving a white-label domain, inject the corresponding organization_id into the request

Use this to enforce scoped logic even before user login (e.g., branding, setup flows)

Test All Changes:

Run CURL tests to verify:

Trip access by unauthorized org fails

Analytics do not leak across orgs

Admin from Org A cannot view Org Bâ€™s data

Confirm real-time logic (if added) respects org boundaries

ðŸ”’ Notes:
Do not break existing routes â€” refactor carefully

If middleware injects organizationId, all routes must use it instead of just userId

Keep global admin capability behind a special system_admin flag if needed

Let me know when the above is done and provide CURL test cases for confirmation.